http:
  routers:
    provider2-dashboard:
      rule: "Host(`provider2.example.com`)"
      service: "provider2-service"
      middlewares:
        - "provider2-cors"
      entryPoints:
        - "web"
    
    provider2-api:
      rule: "Host(`provider2.example.com`) && PathPrefix(`/api`)"
      service: "provider2-api-service"
      middlewares:
        - "provider2-rate-limit"
        - "provider2-retry"
      entryPoints:
        - "web"
    
    provider2-secure:
      rule: "Host(`secure.provider2.example.com`)"
      service: "provider2-secure-service"
      middlewares:
        - "provider2-auth"
      entryPoints:
        - "websecure"
      tls: {}
    
    provider2-metrics:
      rule: "Host(`metrics.provider2.example.com`) && PathPrefix(`/metrics`)"
      service: "provider2-metrics-service"
      entryPoints:
        - "web"

  services:
    provider2-service:
      loadBalancer:
        servers:
          - url: "http://nginx:80"
        healthCheck:
          path: "/health"
          interval: "10s"
    
    provider2-api-service:
      loadBalancer:
        servers:
          - url: "http://whoami:80"
          - url: "http://nginx:80"
        sticky:
          cookie:
            name: "provider2-api-session"
            secure: true
    
    provider2-secure-service:
      loadBalancer:
        servers:
          - url: "http://redis:6379"
    
    provider2-metrics-service:
      loadBalancer:
        servers:
          - url: "http://whoami:80"

  middlewares:
    provider2-cors:
      headers:
        accessControlAllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        accessControlAllowOriginList:
          - "https://provider2.example.com"
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
    
    provider2-rate-limit:
      rateLimit:
        burst: 50
        average: 25
    
    provider2-retry:
      retry:
        attempts: 3
    
    provider2-auth:
      basicAuth:
        users:
          - "provider2:$2y$10$..."
    
    provider2-strip-prefix:
      stripPrefix:
        prefixes:
          - "/api/v1"

  serversTransports:
    provider2-transport:
      serverName: "provider2.internal"
      insecureSkipVerify: true
      rootCAs:
        - "/etc/ssl/certs/provider2-ca.crt"
      certificates:
        - certFile: "/etc/ssl/certs/provider2-client.crt"
          keyFile: "/etc/ssl/private/provider2-client.key"
      maxIdleConnsPerHost: 15
      forwardingTimeouts:
        dialTimeout: "20s"
        responseHeaderTimeout: "45s"
        idleConnTimeout: "120s"
    
    provider2-api-transport:
      serverName: "api.provider2.internal"
      insecureSkipVerify: false
      rootCAs:
        - "/etc/ssl/certs/provider2-api-ca.crt"
        - "/etc/ssl/certs/provider2-root-ca.crt"
      certificates:
        - certFile: "/etc/ssl/certs/provider2-api-client.crt"
          keyFile: "/etc/ssl/private/provider2-api-client.key"
      maxIdleConnsPerHost: 25
      forwardingTimeouts:
        dialTimeout: "15s"
        responseHeaderTimeout: "30s"
        idleConnTimeout: "180s"
    
    provider2-metrics-transport:
      serverName: "metrics.provider2.internal"
      insecureSkipVerify: false
      maxIdleConnsPerHost: 5
      forwardingTimeouts:
        dialTimeout: "5s"
        responseHeaderTimeout: "10s"
        idleConnTimeout: "30s"
    
    provider2-legacy-transport:
      serverName: "legacy.provider2.internal"
      insecureSkipVerify: true
      maxIdleConnsPerHost: 50
      forwardingTimeouts:
        dialTimeout: "60s"
        responseHeaderTimeout: "120s"
        idleConnTimeout: "300s"

tcp:
  routers:
    provider2-tcp:
      rule: "HostSNI(`tcp.provider2.example.com`)"
      service: "provider2-tcp-service"
      entryPoints:
        - "tcp-ep"
      tls:
        passthrough: true
    
    provider2-database:
      rule: "HostSNI(`db.provider2.example.com`)"
      service: "provider2-db-service"
      entryPoints:
        - "tcp-ep"
      middlewares:
        - "provider2-tcp-limit"
      tls:
        passthrough: true
    
    provider2-ssh:
      rule: "HostSNI(`ssh.provider2.example.com`)"
      service: "provider2-ssh-service"
      entryPoints:
        - "tcp-ep"
      tls:
        passthrough: true

  services:
    provider2-tcp-service:
      loadBalancer:
        servers:
          - address: "tcp-echo:8080"
    
    provider2-db-service:
      loadBalancer:
        servers:
          - address: "redis:6379"
    
    provider2-ssh-service:
      loadBalancer:
        servers:
          - address: "tcp-echo:8080"

  middlewares:
    provider2-tcp-limit:
      inFlightConn:
        amount: 5
udp:
  routers:
    provider2-logs:
      service: "provider2-log-service"
      entryPoints:
        - "udp-ep"
    
    provider2-syslog:
      service: "provider2-syslog-service"
      entryPoints:
        - "udp-ep"

  services:
    provider2-log-service:
      loadBalancer:
        servers:
          - address: "udp-echo:8080"
    
    provider2-syslog-service:
      loadBalancer:
        servers:
          - address: "udp-echo:8081"
