http:
  routers:
    provider1-api:
      rule: "Host(`provider1.example.com`)"
      service: "provider1-service"
      middlewares:
        - "provider1-auth"
      entryPoints:
        - "web"
    
    provider1-web:
      rule: "Host(`provider1.example.com`) && PathPrefix(`/web`)"
      service: "provider1-web-service"
      entryPoints:
        - "web"
    
    provider1-admin:
      rule: "Host(`admin.provider1.example.com`)"
      service: "provider1-admin-service"
      middlewares:
        - "provider1-headers"
        - "provider1-auth"
      entryPoints:
        - "web"
    
    provider1-test:
      rule: "Host(`test.provider1.example.com`) && Path(`/health`)"
      service: "provider1-test-service"
      entryPoints:
        - "web"

  services:
    provider1-service:
      loadBalancer:
        servers:
          - url: "http://whoami:80"
        healthCheck:
          path: "/health"
          interval: "10s"
    
    provider1-web-service:
      loadBalancer:
        servers:
          - url: "http://nginx:80"
          - url: "http://whoami:80"
        sticky:
          cookie:
            name: "provider1-session"
    
    provider1-admin-service:
      loadBalancer:
        servers:
          - url: "http://nginx:80"
    
    provider1-test-service:
      loadBalancer:
        servers:
          - url: "http://whoami:80"

  middlewares:
    provider1-auth:
      basicAuth:
        users:
          - "provider1:$2y$10$..."
    
    provider1-headers:
      headers:
        customRequestHeaders:
          X-Provider: "provider1"
          X-Environment: "test"
        customResponseHeaders:
          X-Response-Provider: "provider1"
    
    provider1-rate-limit:
      rateLimit:
        burst: 20
        average: 10
    
    provider1-compress:
      compress: {}

  serversTransports:
    provider1-transport:
      serverName: "provider1.internal"
      insecureSkipVerify: false

tcp:
  routers:
    provider1-tcp:
      rule: "HostSNI(`tcp-provider1.example.com`)"
      service: "provider1-tcp-service"
      entryPoints:
        - "tcp-ep"
    
    provider1-redis:
      rule: "HostSNI(`redis-provider1.example.com`)"
      service: "provider1-redis-service"
      entryPoints:
        - "tcp-ep"
      middlewares:
        - "provider1-tcp-limit"

  services:
    provider1-tcp-service:
      loadBalancer:
        servers:
          - address: "tcp-echo:8080"
    
    provider1-redis-service:
      loadBalancer:
        servers:
          - address: "redis:6379"

  middlewares:
    provider1-tcp-limit:
      inFlightConn:
        amount: 5

udp:
  routers:
    provider1-udp:
      service: "provider1-udp-service"
      entryPoints:
        - "udp-ep"
    
    provider1-dns:
      service: "provider1-dns-service"
      entryPoints:
        - "udp-ep"

  services:
    provider1-udp-service:
      loadBalancer:
        servers:
          - address: "udp-echo:8080"
    
    provider1-dns-service:
      loadBalancer:
        servers:
          - address: "udp-echo:8080"

tls:
  certificates:
    - certFile: "/etc/ssl/certs/provider1.crt"
      keyFile: "/etc/ssl/private/provider1.key"
      stores:
        - "provider1"
  
  options:
    provider1-tls:
      minVersion: "VersionTLS12"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
  
  stores:
    provider1:
      defaultCertificate:
        certFile: "/etc/ssl/certs/provider1-default.crt"
        keyFile: "/etc/ssl/private/provider1-default.key"
